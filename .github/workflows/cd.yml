name: CD

on:
  push:
    branches: [ "main" ]

concurrency:
  group: browser-lambda-${{ github.ref_name }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ENV_NAME: dev
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  RUN_BOOTSTRAP: ${{ vars.RUN_BOOTSTRAP || 'false' }}

jobs:
  build-validate-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Test with coverage
        run: npm run test:coverage

      # Infrastructure guardrails per CICD-2
      - name: Install infra dependencies
        working-directory: infrastructure
        run: npm ci

      - name: Infra Build
        working-directory: infrastructure
        run: npm run build

      - name: Infra Type-check
        working-directory: infrastructure
        run: npm run type-check

      - name: Infra Lint
        working-directory: infrastructure
        run: npm run lint

      - name: Infra Format check
        working-directory: infrastructure
        run: npm run format:check

      - name: Infra Tests
        working-directory: infrastructure
        run: npm run test

  package-and-push-image:
    runs-on: ubuntu-24.04-arm
    needs: build-validate-test
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_digest: ${{ steps.resolve_digest.outputs.image_digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tags
        id: meta
        run: |
          echo "image_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build image
        run: |
          npm ci
          npm run dist
          docker build --platform linux/arm64 \
            -t $ECR_REPOSITORY:latest \
            -t $ECR_REPOSITORY:${{ steps.meta.outputs.image_tag }} .

      - name: Tag with account registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker tag $ECR_REPOSITORY:latest $REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:${{ steps.meta.outputs.image_tag }} $REGISTRY/$ECR_REPOSITORY:${{ steps.meta.outputs.image_tag }}
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV

      - name: Push images
        run: |
          docker push $REGISTRY/$ECR_REPOSITORY:latest
          docker push $REGISTRY/$ECR_REPOSITORY:${{ steps.meta.outputs.image_tag }}

      - name: Resolve image digest for SHA tag
        id: resolve_digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "$ECR_REPOSITORY" \
            --image-ids imageTag=${{ steps.meta.outputs.image_tag }} \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          echo "image_digest=$DIGEST" >> "$GITHUB_OUTPUT"

  cdk-deploy:
    runs-on: ubuntu-latest
    needs: package-and-push-image
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install infra dependencies
        working-directory: infrastructure
        run: npm ci

      - name: CDK Bootstrap (optional)
        if: env.RUN_BOOTSTRAP == 'true'
        working-directory: infrastructure
        env:
          CDK_NEW_BOOTSTRAP: "1"
        run: |
          npx cdk bootstrap \
            --qualifier bl${{ env.ENV_NAME }} \
            aws://${{ env.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: Skip bootstrap (pre-bootstrapped account)
        if: env.RUN_BOOTSTRAP != 'true'
        run: echo "Skipping CDK bootstrap (RUN_BOOTSTRAP is not 'true'). Ensure the account is pre-bootstrapped using modern bootstrap."

      - name: CDK Deploy
        working-directory: infrastructure
        env:
          IMAGE_TAG: ${{ needs.package-and-push-image.outputs.image_digest }}
          ENV_NAME: ${{ env.ENV_NAME }}
        run: |
          npx cdk deploy --require-approval never \
            -c environment=${ENV_NAME} \
            -c imageTag=${IMAGE_TAG}
